#!/usr/bin/env ruby

require 'optparse'
require 'pathname'
require 'highline/import'

locate = File.readlink(__FILE__) if File.symlink? __FILE__
locate ||= __FILE__

require File.expand_path('../lang/lang.rb', locate)
require File.expand_path('../process/process.rb', locate)

class ContestImpl
  def type type=nil
    @type = type if type
    @type
  end

  def title title=nil
    @title = title if title
    @title
  end

  def path path=nil
    @path = path if path
    @path
  end
  
  def url url=nil
    @url = url if url
    @url
  end

  def tasks &block
    @tasks = Tasks.new if block
    @tasks.instance_eval &block if block
    @tasks
  end

  :private
  def show
    puts "type::#{@type}"
    puts "title::#{@title}" if @title
    puts "path::#{@path}"
    @tasks.show "\t"
  end

  def propagate
    @url = eval("\"#{@url}\"")
    @tasks.propagate @path
  end
end

class Tasks
  attr_accessor :stock, :path

  def initialize
    @stock = []
    @path = nil
  end

  def revision rev=nil
    @rev = rev if rev
    @rev
  end

  def path_rel path=nil
    @path_rel = path if path
    @path_rel
  end

  def path_abs path=nil
    @path_abs = path if path
    @path_abs
  end

  def task name, &block
    _task = Task.new name
    _task.instance_eval &block
    @stock.push _task
  end

  :private
  def show prefix=""
    puts "#{prefix}Revison: #{@rev}"
    puts "#{prefix}Path: #{get_path}"

    @stock.each do |t|
      t.show "#{prefix}\t"
    end
  end

  def get_path p_path=nil
    return @path if @path

    @path = @path_abs if @path_abs
    @path = File.join(p_path, @path_rel) if @path_rel && p_path

    puts 'error処理しなきゃね' unless @path && p_path

    @path_abs = @path

    from = Pathname.new p_path
    to = Pathname.new @path_abs

    @path_rel = to.relative_path_from(from).to_s
    @path
  end

  def propagate p_path
    get_path p_path
    @stock.each do |t|
      t.propagate get_path
    end
  end
end

class Task
  attr_accessor :path, :name
  
  def initialize name
    @name = name
    @path = nil
  end

  def lang lang=nil
    @lang = lang if lang
    @lang
  end

  def memo memo=nil
    @memo = memo if memo
    @memo
  end

  def path_rel path=nil
    @path_rel = path if path
    @path_abs = nil if path
    @path_rel
  end

  def path_abs path=nil
    @path_abs = path if path
    @path_rel = nil if path
    @path_abs
  end

  :private
  def show prefix=""
    puts "#{prefix}Task: #{@name}"
    puts "#{prefix}\tPath: #{get_path}"
    puts "#{prefix}\tLang: #{@lang}" if @lang
    puts "#{prefix}\tMemo: #{@memo}" if @memo
  end

  def get_path p_path=nil
    return @path if @path

    @path = @path_abs if @path_abs
    @path = File.join(p_path, @path_rel) if @path_rel && p_path

    puts 'error処理しなきゃね' unless @path && p_path

    @path_abs = @path

    from = Pathname.new p_path
    to = Pathname.new @path_abs

    @path_rel = to.relative_path_from(from).to_s
    @path
  end

  def propagate p_path
    get_path p_path
  end
end

class Gpst
  def initialize &block
    @con = ContestImpl.new
    @con.instance_eval &block
    @con.propagate
  end

  def show
    @con.show
  end

  def contest
    @con
  end

  def abstract
    "#{@con.title}, Rev.#{@con.tasks.revision}, #{@con.url}, #{@con.path}"
  end

  def smp_validation
    @con.tasks.stock.map {|s|
      s.name.to_s
    }. reduce {|r, s|
      "#{r}/#{s}"
    }
  end

  def validation
    @con.tasks.stock.map {|s|
      s.name.to_s
    }. reduce {|r, s|
      "#{r}|#{s}"
    }
  end

  def get_solver id
    @con.tasks.stock.select {|s|
      s.name==id
    }.first
  end

  def ask_yn msg, msg2="Continue"
    confirm = ask("#{msg}.  #{msg2}? [Y/N] ") { |yn| yn.limit = 1, yn.validate = /[yn]/i }
    confirm.downcase == 'y'
  end
end

def contest &block
  $gpst = Gpst.new &block
end

options={}

OptionParser.new do |opt|
  opt.on('-p PROCESS', 'Determine what do for the selected file. Default is "submit"') {|v|
    options[:p] = v
  }

  opt.on('-l', 'Show available languages, processes') {|v|
    options[:l] = v
  }

  opt.parse!(ARGV)
end

begin
  puts Lang.singleton_methods
  exit
end if options[:l]

options[:p]="submit" unless options[:p]

begin
  puts 'At least one argument required'
  exit
end if ARGV.empty?

# load configuration
load File.expand_path(ARGV[0])

# show data
puts $gpst.abstract

id = ask("What would you like to process? [#{$gpst.smp_validation}] ") { |num| 
  num.limit = 1, num.validate = /(#{$gpst.validation})/i 
}

exit unless $gpst.ask_yn "Select '#{id}'"

selectee = $gpst.get_solver id

puts "..."
puts "Selectee at \"#{selectee.path}\", \##{selectee.lang}"
puts "..."
puts "Load the content..."
puts "..."

module_lang = Gpst.class.const_get(selectee.lang.capitalize)
tmp_path = module_lang.send("filter", File.expand_path(selectee.path))

system("less #{tmp_path}") if $gpst.ask_yn "Filtered", "Show"

exit unless $gpst.ask_yn "#{options[:p].capitalize}"

module_proc = Gpst.class.const_get(options[:p].capitalize)

module_proc.send("process", tmp_path, $gpst.contest, selectee)