#!/usr/bin/env ruby

require 'pathname'
require 'highline/import'

class ContestImpl
  def initialize type
    @type = type
  end

  def title title=nil
    @title = title if title
    @title
  end

  def path path=nil
    @path = path if path
    @path
  end
  
  def url url=nil
    @url = url if url
    @url
  end

  def tasks &block
    @tasks = Tasks.new if block
    @tasks.instance_eval &block if block
    @tasks
  end

  :private
  def show
    puts "type::#{@type}"
    puts "title::#{@title}" if @title
    puts "path::#{@path}"
    @tasks.show "\t"
  end

  def propagate
    @tasks.propagate @path
  end
end

class Tasks
  attr_accessor :stock, :path

  def initialize
    @stock = []
    @path = nil
  end

  def revision rev=nil
    @rev = rev if rev
    @rev
  end

  def path_rel path=nil
    @path_rel = path if path
    @path_rel
  end

  def path_abs path=nil
    @path_abs = path if path
    @path_abs
  end

  def task name, &block
    _task = Task.new name
    _task.instance_eval &block
    @stock.push _task
  end

  :private
  def show prefix
    puts "#{prefix}Revison: #{@rev}"
    puts "#{prefix}Path: #{get_path}"

    @stock.each do |t|
      t.show "#{prefix}\t"
    end
  end

  def get_path p_path=nil
    return @path if @path

    @path = @path_abs if @path_abs
    @path = File.join(p_path, @path_rel) if @path_rel && p_path

    puts 'error処理しなきゃね' unless @path && p_path

    @path_abs = @path

    from = Pathname.new p_path
    to = Pathname.new @path_abs

    @path_rel = to.relative_path_from(from).to_s
    @path
  end

  def propagate p_path
    get_path p_path
    @stock.each do |t|
      t.propagate get_path
    end
  end
end

class Task
  attr_accessor :path, :name
  
  def initialize name
    @name = name
    @path = nil
  end

  def memo memo=nil
    @memo = memo if memo
    @memo
  end

  def path_rel path=nil
    @path_rel = path if path
    @path_abs = nil if path
    @path_rel
  end

  def path_abs path=nil
    @path_abs = path if path
    @path_rel = nil if path
    @path_abs
  end

  :private
  def show prefix
    puts "#{prefix}Task: #{@name}"
    puts "#{prefix}\tPath: #{get_path}"
    puts "#{prefix}\tMemo: #{@memo}" if @memo
  end

  def get_path p_path=nil
    return @path if @path

    @path = @path_abs if @path_abs
    @path = File.join(p_path, @path_rel) if @path_rel && p_path

    puts 'error処理しなきゃね' unless @path && p_path

    @path_abs = @path

    from = Pathname.new p_path
    to = Pathname.new @path_abs

    @path_rel = to.relative_path_from(from).to_s
    @path
  end

  def propagate p_path
    get_path p_path
  end
end

class Gpst
  def initialize type, &block
    @con = ContestImpl.new type
    @con.instance_eval &block
    @con.propagate
  end

  def show
    @con.show
  end

  def smp_validation
    @con.tasks.stock.map {|s|
      s.name.to_s
    }. reduce {|r, s|
      "#{r}/#{s}"
    }
  end

  def validation
    @con.tasks.stock.map {|s|
      s.name.to_s
    }. reduce {|r, s|
      "#{r}|#{s}"
    }
  end
end

def contest type, &block
  $gpst = Gpst.new (type), &block
end

load File.expand_path(ARGV[0])

$gpst.show

id = ask("What would you like to submit? [#{$gpst.smp_validation}] ") { |num| num.limit = 1, num.validate = /(#{$gpst.validation})/i }

confirm = ask("Submit '#{id}'.  Do it? [Y/N] ") { |yn| yn.limit = 1, yn.validate = /[yn]/i }
exit unless confirm.downcase == 'y'



